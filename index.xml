<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Obliv-C</title>
    <link>//oblivc.org/</link>
    <description>Recent content on Obliv-C</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="//oblivc.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Obliv-C - Documentation</title>
      <link>//oblivc.org/documentation/</link>
      <pubDate>Thu, 06 Jul 2017 16:05:58 -0400</pubDate>
      
      <guid>//oblivc.org/documentation/</guid>
      <description>About this Documentation This documention is provided to make the Obliv-C API simpler for users to understand in order to write programs in Obliv-C successfully, and uses an informal tone to achieve this purpose. For a more formal introduction to Obliv-C, read Obliv-C: A Language for Extensible Data-Oblivious Computation. For getting started quickly programming with Obliv-C, we recommend using the tutorial.
 This documentation is generated from https://github.com/uvasrg/oblivc-web/; please submit an Issue or PR if you have suggestions on improving it.</description>
    </item>
    
    <item>
      <title></title>
      <link>//oblivc.org/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//oblivc.org/projects/</guid>
      <description>Projects Using Obliv-C Libraries and Protocols floram Jack Doerner and abhi shelat. Scaling ORAM for Secure Computation. In 24thACM Conference on Computer and Communications Security. Dallas, TX. 31 Oct-3 November 2017. (Best Paper Award)
SqORAM Samee Zahur, Xiao Wang, Mariana Raykova, Adrià Gascón, Jack Doerner, David Evans, Jonathan Katz. Revisiting Square-Root ORAM Efficient Random Access in Multi-Party Computation In 37thIEEE Symposium on Security and Privacy (&amp;ldquo;Oakland&amp;rdquo;). San Jose, CA. 23-25 May 2016.</description>
    </item>
    
    <item>
      <title>Decentralized Certificate Authorities</title>
      <link>//oblivc.org/dca/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//oblivc.org/dca/</guid>
      <description>The security of TLS depends on trust in certificate authorities, and that trust stems from their ability to protect and control the use of a private signing key. The signing key is the key asset of a certificate authority (CA), and its value is based on trust in the corresponding public key which is primarily distributed by browser vendors. Compromise of a CA private key represents a single point-of-failure that could have disastrous consequences, so CAs go to great lengths to attempt to protect and control the use of their private keys.</description>
    </item>
    
    <item>
      <title>Obliv-C Publications</title>
      <link>//oblivc.org/pubs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//oblivc.org/pubs/</guid>
      <description>Bargav Jayaraman and David Evans. Evaluating Differentially Private Machine Learning in Practice. 28thUSENIX Security Symposium. Santa Clara. August 2019. [PDF, 20 pages] [arXiv] [code]
Bargav Jayaraman, Lingxiao Wang, David Evans and Quanquan Gu. Distributed Learning without Distress: Privacy-Preserving Empirical Risk Minimization. 32ndConference on Neural Information Processing Systems(NeurIPS). Montreal, Canada. December 2018. [PDF, 19 pages, including supplemental materials]
Jack Doerner and abhi shelat. Scaling ORAM for Secure Computation. In 24thACM Conference on Computer and Communications Security.</description>
    </item>
    
    <item>
      <title>Obliv-C Talks</title>
      <link>//oblivc.org/talks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//oblivc.org/talks/</guid>
      <description>David Evans. Secure Multi-Party Computation: Promises, Protocols, and Practicalities. ECRYPT NET Workshop on Crypto for the Cloud &amp;amp; Implementation, Paris, France, 27 June 2017. [Speaker Deck]
David Evans and Denis Nekipelov. Private Data Analysis using Multi-Party Computation. Federal Trade Commission (joint presentation), 18 August 2016.
David Evans. Memory for Data Oblivious Computation. ShanghaiTech Symposium, 25 June 2016. [Speaker Deck]
David Evans. From Mercury Delay Lines to Magnetic Core Memories: Progress in Oblivious Memories.</description>
    </item>
    
    <item>
      <title>Obliv-C Tutorial</title>
      <link>//oblivc.org/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//oblivc.org/tutorial/</guid>
      <description>Obliv-C is a simple GCC wrapper that makes it easy to embed secure computation protocols inside regular C programs. This tutorial explains how to set up and build your first Obliv-C program using privacy-preserving linear regression application as an example.
Installation 1. Install Dependencies Before setting up Obliv-C, several other modules need to be installed. Here are the commands to do the installations, depending on your platform.
Ubuntu:
$ sudo apt install ocaml libgcrypt20-dev ocaml-findlib Fedora:</description>
    </item>
    
    <item>
      <title>Obliv-C: A Language for Extensible Data-Oblivious Computation</title>
      <link>//oblivc.org/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//oblivc.org/main/</guid>
      <description>Obliv-C is a simple GCC wrapper that makes it easy to embed secure computation protocols inside regular C programs.
The idea is simple: if you are performing a multi-party distributed computation with sensitive data, just write it in our Obliv-C langauge and compile/link it with your project. The result will be a secure multi-party cryptographic protocol that performs this operation without revealing any of the inputs or intermediate values of the computation to any of the parties.</description>
    </item>
    
    <item>
      <title>Privacy-Preserving Machine Learning</title>
      <link>//oblivc.org/ppml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//oblivc.org/ppml/</guid>
      <description>Distributed learning (sometimes known as federated learning) allows a group of independent data owners to collaboratively learn a model over their data sets without exposing their private data.
Our approach combines differential privacy with secure multi-party computation to both protect the data during training and produce a model that provides privacy against inference attacks.
We explore two popular methods of differential privacy, output perturbation and gradient perturbation, and advance the state-of-the-art for both methods in the distributed learning setting.</description>
    </item>
    
    <item>
      <title>Revisiting Square Root ORAM</title>
      <link>//oblivc.org/sqoram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//oblivc.org/sqoram/</guid>
      <description>Efficient Random Access in Multi-Party Computation Hiding memory access patterns is required for secure computation, but remains prohibitively expensive for many interesting applications. Prior work has either developed custom algorithms that minimize the need for data-dependant memory access, or proposed the use of Oblivious RAM (ORAM) to provide a general-purpose solution. However, most ORAMs are designed for client-server scenarios, and provide only asymptotic benefits in secure computation.
We show how the classical square-root ORAM of Goldreich and Ostrovsky can be modified to provide a practical ORAM for use in secure computation, even though it is asymptotically worse than the best known schemes.</description>
    </item>
    
    <item>
      <title>Revisiting Square Root ORAM</title>
      <link>//oblivc.org/sqrtoram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//oblivc.org/sqrtoram/</guid>
      <description>Efficient Random Access in Multi-Party Computation Hiding memory access patterns is required for secure computation, but remains prohibitively expensive for many interesting applications. Prior work has either developed custom algorithms that minimize the need for data-dependant memory access, or proposed the use of Oblivious RAM (ORAM) to provide a general-purpose solution. However, most ORAMs are designed for client-server scenarios, and provide only asymptotic benefits in secure computation.
We show how the classical square-root ORAM of Goldreich and Ostrovsky can be modified to provide a practical ORAM for use in secure computation, even though it is asymptotically worse than the best known schemes.</description>
    </item>
    
    <item>
      <title>Rust Wrapper for Obliv-C</title>
      <link>//oblivc.org/rust/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//oblivc.org/rust/</guid>
      <description>unsafe { pd.exec_yao_protocol(millionaire, &amp;amp;mut args); } Phillipp Schoppmann developed a Rust library for enabling Rust programs to integrate with protocols implemented in Obliv-C.
https://github.com/schoppmp/oblivc-rust</description>
    </item>
    
    <item>
      <title>Secure Stable Matching at Scale</title>
      <link>//oblivc.org/matching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//oblivc.org/matching/</guid>
      <description>When a group of individuals and organizations wish to compute a stable matching — for example, when medical students are matched to medical residency programs — they often outsource the computation to a trusted arbiter to preserve the privacy of participants’ preference rankings. Secure multi-party computation presents an alternative that offers the possibility of private matching processes that do not rely on any common trusted third party. However, stable matching algorithms are computationally intensive and involve complex data-dependent memory access patterns, so they have previously been considered infeasible for execution in a secure multiparty context on non-trivial inputs.</description>
    </item>
    
  </channel>
</rss>
